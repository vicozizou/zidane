// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bytepoxic.core.web.faces.bean;

import com.bytepoxic.core.model.Location;
import com.bytepoxic.core.model.Nationality;
import com.bytepoxic.core.service.LocationService;
import com.bytepoxic.core.web.faces.bean.NationalityBean;
import com.bytepoxic.core.web.faces.bean.converter.LocationConverter;
import com.bytepoxic.core.web.faces.bean.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect NationalityBean_Roo_ManagedBean {
    
    declare @type: NationalityBean: @ManagedBean(name = "nationalityBean");
    
    declare @type: NationalityBean: @SessionScoped;
    
    @Autowired
    LocationService NationalityBean.locationService;
    
    private String NationalityBean.name = "Nationalitys";
    
    private Nationality NationalityBean.nationality;
    
    private List<Nationality> NationalityBean.allNationalitys;
    
    private boolean NationalityBean.dataVisible = false;
    
    private List<String> NationalityBean.columns;
    
    private HtmlPanelGrid NationalityBean.createPanelGrid;
    
    private HtmlPanelGrid NationalityBean.editPanelGrid;
    
    private HtmlPanelGrid NationalityBean.viewPanelGrid;
    
    private boolean NationalityBean.createDialogVisible = false;
    
    @PostConstruct
    public void NationalityBean.init() {
        columns = new ArrayList<String>();
        columns.add("labelKey");
        columns.add("name");
    }
    
    public String NationalityBean.getName() {
        return name;
    }
    
    public List<String> NationalityBean.getColumns() {
        return columns;
    }
    
    public List<Nationality> NationalityBean.getAllNationalitys() {
        return allNationalitys;
    }
    
    public void NationalityBean.setAllNationalitys(List<Nationality> allNationalitys) {
        this.allNationalitys = allNationalitys;
    }
    
    public String NationalityBean.findAllNationalitys() {
        allNationalitys = locationService.findAllNationalitys();
        dataVisible = !allNationalitys.isEmpty();
        return null;
    }
    
    public boolean NationalityBean.isDataVisible() {
        return dataVisible;
    }
    
    public void NationalityBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid NationalityBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void NationalityBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid NationalityBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void NationalityBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid NationalityBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void NationalityBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid NationalityBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel labelKeyCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        labelKeyCreateOutput.setFor("labelKeyCreateInput");
        labelKeyCreateOutput.setId("labelKeyCreateOutput");
        labelKeyCreateOutput.setValue("Label Key:");
        htmlPanelGrid.getChildren().add(labelKeyCreateOutput);
        
        InputTextarea labelKeyCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        labelKeyCreateInput.setId("labelKeyCreateInput");
        labelKeyCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nationalityBean.nationality.labelKey}", String.class));
        LengthValidator labelKeyCreateInputValidator = new LengthValidator();
        labelKeyCreateInputValidator.setMaximum(128);
        labelKeyCreateInput.addValidator(labelKeyCreateInputValidator);
        labelKeyCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(labelKeyCreateInput);
        
        Message labelKeyCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        labelKeyCreateInputMessage.setId("labelKeyCreateInputMessage");
        labelKeyCreateInputMessage.setFor("labelKeyCreateInput");
        labelKeyCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(labelKeyCreateInputMessage);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputTextarea nameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nationalityBean.nationality.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(64);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel countryCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        countryCreateOutput.setFor("countryCreateInput");
        countryCreateOutput.setId("countryCreateOutput");
        countryCreateOutput.setValue("Country:");
        htmlPanelGrid.getChildren().add(countryCreateOutput);
        
        AutoComplete countryCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        countryCreateInput.setId("countryCreateInput");
        countryCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nationalityBean.nationality.country}", Location.class));
        countryCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{nationalityBean.completeCountry}", List.class, new Class[] { String.class }));
        countryCreateInput.setDropdown(true);
        countryCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "country", String.class));
        countryCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{country.name} #{country.code} #{country.latitude} #{country.longitude}", String.class));
        countryCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{country}", Location.class));
        countryCreateInput.setConverter(new LocationConverter());
        countryCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(countryCreateInput);
        
        Message countryCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        countryCreateInputMessage.setId("countryCreateInputMessage");
        countryCreateInputMessage.setFor("countryCreateInput");
        countryCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(countryCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid NationalityBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel labelKeyEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        labelKeyEditOutput.setFor("labelKeyEditInput");
        labelKeyEditOutput.setId("labelKeyEditOutput");
        labelKeyEditOutput.setValue("Label Key:");
        htmlPanelGrid.getChildren().add(labelKeyEditOutput);
        
        InputTextarea labelKeyEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        labelKeyEditInput.setId("labelKeyEditInput");
        labelKeyEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nationalityBean.nationality.labelKey}", String.class));
        LengthValidator labelKeyEditInputValidator = new LengthValidator();
        labelKeyEditInputValidator.setMaximum(128);
        labelKeyEditInput.addValidator(labelKeyEditInputValidator);
        labelKeyEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(labelKeyEditInput);
        
        Message labelKeyEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        labelKeyEditInputMessage.setId("labelKeyEditInputMessage");
        labelKeyEditInputMessage.setFor("labelKeyEditInput");
        labelKeyEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(labelKeyEditInputMessage);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputTextarea nameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nationalityBean.nationality.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(64);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel countryEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        countryEditOutput.setFor("countryEditInput");
        countryEditOutput.setId("countryEditOutput");
        countryEditOutput.setValue("Country:");
        htmlPanelGrid.getChildren().add(countryEditOutput);
        
        AutoComplete countryEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        countryEditInput.setId("countryEditInput");
        countryEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nationalityBean.nationality.country}", Location.class));
        countryEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{nationalityBean.completeCountry}", List.class, new Class[] { String.class }));
        countryEditInput.setDropdown(true);
        countryEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "country", String.class));
        countryEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{country.name} #{country.code} #{country.latitude} #{country.longitude}", String.class));
        countryEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{country}", Location.class));
        countryEditInput.setConverter(new LocationConverter());
        countryEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(countryEditInput);
        
        Message countryEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        countryEditInputMessage.setId("countryEditInputMessage");
        countryEditInputMessage.setFor("countryEditInput");
        countryEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(countryEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid NationalityBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText labelKeyLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        labelKeyLabel.setId("labelKeyLabel");
        labelKeyLabel.setValue("Label Key:");
        htmlPanelGrid.getChildren().add(labelKeyLabel);
        
        InputTextarea labelKeyValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        labelKeyValue.setId("labelKeyValue");
        labelKeyValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nationalityBean.nationality.labelKey}", String.class));
        labelKeyValue.setReadonly(true);
        labelKeyValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(labelKeyValue);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        InputTextarea nameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nationalityBean.nationality.name}", String.class));
        nameValue.setReadonly(true);
        nameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText countryLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        countryLabel.setId("countryLabel");
        countryLabel.setValue("Country:");
        htmlPanelGrid.getChildren().add(countryLabel);
        
        HtmlOutputText countryValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        countryValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nationalityBean.nationality.country}", Location.class));
        countryValue.setConverter(new LocationConverter());
        htmlPanelGrid.getChildren().add(countryValue);
        
        return htmlPanelGrid;
    }
    
    public Nationality NationalityBean.getNationality() {
        if (nationality == null) {
            nationality = new Nationality();
        }
        return nationality;
    }
    
    public void NationalityBean.setNationality(Nationality nationality) {
        this.nationality = nationality;
    }
    
    public List<Location> NationalityBean.completeCountry(String query) {
        List<Location> suggestions = new ArrayList<Location>();
        for (Location location : locationService.findAllLocations()) {
            String locationStr = String.valueOf(location.getName() +  " "  + location.getCode() +  " "  + location.getLatitude() +  " "  + location.getLongitude());
            if (locationStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(location);
            }
        }
        return suggestions;
    }
    
    public String NationalityBean.onEdit() {
        return null;
    }
    
    public boolean NationalityBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void NationalityBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String NationalityBean.displayList() {
        createDialogVisible = false;
        findAllNationalitys();
        return "nationality";
    }
    
    public String NationalityBean.displayCreateDialog() {
        nationality = new Nationality();
        createDialogVisible = true;
        return "nationality";
    }
    
    public String NationalityBean.persist() {
        String message = "";
        if (nationality.getId() != null) {
            locationService.updateNationality(nationality);
            message = "message_successfully_updated";
        } else {
            locationService.saveNationality(nationality);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Nationality");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllNationalitys();
    }
    
    public String NationalityBean.delete() {
        locationService.deleteNationality(nationality);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Nationality");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllNationalitys();
    }
    
    public void NationalityBean.reset() {
        nationality = null;
        createDialogVisible = false;
    }
    
    public void NationalityBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
