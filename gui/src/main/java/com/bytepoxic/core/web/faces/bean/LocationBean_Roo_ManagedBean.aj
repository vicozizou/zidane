// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bytepoxic.core.web.faces.bean;

import com.bytepoxic.core.dao.NationalityDAO;
import com.bytepoxic.core.model.Location;
import com.bytepoxic.core.model.Nationality;
import com.bytepoxic.core.service.LocationService;
import com.bytepoxic.core.web.faces.bean.LocationBean;
import com.bytepoxic.core.web.faces.bean.converter.LocationConverter;
import com.bytepoxic.core.web.faces.bean.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect LocationBean_Roo_ManagedBean {
    
    declare @type: LocationBean: @ManagedBean(name = "locationBean");
    
    declare @type: LocationBean: @SessionScoped;
    
    @Autowired
    LocationService LocationBean.locationService;
    
    @Autowired
    NationalityDAO LocationBean.nationalityDAO;
    
    private String LocationBean.name = "Locations";
    
    private Location LocationBean.location;
    
    private List<Location> LocationBean.allLocations;
    
    private boolean LocationBean.dataVisible = false;
    
    private List<String> LocationBean.columns;
    
    private HtmlPanelGrid LocationBean.createPanelGrid;
    
    private HtmlPanelGrid LocationBean.editPanelGrid;
    
    private HtmlPanelGrid LocationBean.viewPanelGrid;
    
    private boolean LocationBean.createDialogVisible = false;
    
    private List<Location> LocationBean.selectedChildren;
    
    @PostConstruct
    public void LocationBean.init() {
        columns = new ArrayList<String>();
        columns.add("creationDate");
        columns.add("updateDate");
        columns.add("name");
        columns.add("code");
        columns.add("latitude");
    }
    
    public String LocationBean.getName() {
        return name;
    }
    
    public List<String> LocationBean.getColumns() {
        return columns;
    }
    
    public List<Location> LocationBean.getAllLocations() {
        return allLocations;
    }
    
    public void LocationBean.setAllLocations(List<Location> allLocations) {
        this.allLocations = allLocations;
    }
    
    public String LocationBean.findAllLocations() {
        allLocations = locationService.findAllLocations();
        dataVisible = !allLocations.isEmpty();
        return null;
    }
    
    public boolean LocationBean.isDataVisible() {
        return dataVisible;
    }
    
    public void LocationBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid LocationBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void LocationBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid LocationBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void LocationBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid LocationBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void LocationBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid LocationBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel deletedCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        deletedCreateOutput.setFor("deletedCreateInput");
        deletedCreateOutput.setId("deletedCreateOutput");
        deletedCreateOutput.setValue("Deleted:");
        htmlPanelGrid.getChildren().add(deletedCreateOutput);
        
        SelectBooleanCheckbox deletedCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        deletedCreateInput.setId("deletedCreateInput");
        deletedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.deleted}", Boolean.class));
        deletedCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(deletedCreateInput);
        
        Message deletedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        deletedCreateInputMessage.setId("deletedCreateInputMessage");
        deletedCreateInputMessage.setFor("deletedCreateInput");
        deletedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(deletedCreateInputMessage);
        
        OutputLabel creationDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateCreateOutput.setFor("creationDateCreateInput");
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        OutputLabel updateDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updateDateCreateOutput.setFor("updateDateCreateInput");
        updateDateCreateOutput.setId("updateDateCreateOutput");
        updateDateCreateOutput.setValue("Update Date:");
        htmlPanelGrid.getChildren().add(updateDateCreateOutput);
        
        Calendar updateDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updateDateCreateInput.setId("updateDateCreateInput");
        updateDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.updateDate}", Date.class));
        updateDateCreateInput.setNavigator(true);
        updateDateCreateInput.setEffect("slideDown");
        updateDateCreateInput.setPattern("dd/MM/yyyy");
        updateDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updateDateCreateInput);
        
        Message updateDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updateDateCreateInputMessage.setId("updateDateCreateInputMessage");
        updateDateCreateInputMessage.setFor("updateDateCreateInput");
        updateDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updateDateCreateInputMessage);
        
        OutputLabel parentCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        parentCreateOutput.setFor("parentCreateInput");
        parentCreateOutput.setId("parentCreateOutput");
        parentCreateOutput.setValue("Parent:");
        htmlPanelGrid.getChildren().add(parentCreateOutput);
        
        AutoComplete parentCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        parentCreateInput.setId("parentCreateInput");
        parentCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.parent}", Location.class));
        parentCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{locationBean.completeParent}", List.class, new Class[] { String.class }));
        parentCreateInput.setDropdown(true);
        parentCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "parent", String.class));
        parentCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{parent.creationDate} #{parent.updateDate} #{parent.name} #{parent.code}", String.class));
        parentCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{parent}", Location.class));
        parentCreateInput.setConverter(new LocationConverter());
        parentCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(parentCreateInput);
        
        Message parentCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        parentCreateInputMessage.setId("parentCreateInputMessage");
        parentCreateInputMessage.setFor("parentCreateInput");
        parentCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(parentCreateInputMessage);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputTextarea nameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(64);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel codeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        codeCreateOutput.setFor("codeCreateInput");
        codeCreateOutput.setId("codeCreateOutput");
        codeCreateOutput.setValue("Code:");
        htmlPanelGrid.getChildren().add(codeCreateOutput);
        
        InputText codeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codeCreateInput.setId("codeCreateInput");
        codeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.code}", String.class));
        LengthValidator codeCreateInputValidator = new LengthValidator();
        codeCreateInputValidator.setMaximum(2);
        codeCreateInput.addValidator(codeCreateInputValidator);
        codeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(codeCreateInput);
        
        Message codeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codeCreateInputMessage.setId("codeCreateInputMessage");
        codeCreateInputMessage.setFor("codeCreateInput");
        codeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codeCreateInputMessage);
        
        OutputLabel appCurrentCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        appCurrentCreateOutput.setFor("appCurrentCreateInput");
        appCurrentCreateOutput.setId("appCurrentCreateOutput");
        appCurrentCreateOutput.setValue("App Current:");
        htmlPanelGrid.getChildren().add(appCurrentCreateOutput);
        
        SelectBooleanCheckbox appCurrentCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        appCurrentCreateInput.setId("appCurrentCreateInput");
        appCurrentCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.appCurrent}", Boolean.class));
        appCurrentCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(appCurrentCreateInput);
        
        Message appCurrentCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        appCurrentCreateInputMessage.setId("appCurrentCreateInputMessage");
        appCurrentCreateInputMessage.setFor("appCurrentCreateInput");
        appCurrentCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(appCurrentCreateInputMessage);
        
        OutputLabel latitudeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        latitudeCreateOutput.setFor("latitudeCreateInput");
        latitudeCreateOutput.setId("latitudeCreateOutput");
        latitudeCreateOutput.setValue("Latitude:");
        htmlPanelGrid.getChildren().add(latitudeCreateOutput);
        
        InputText latitudeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        latitudeCreateInput.setId("latitudeCreateInput");
        latitudeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.latitude}", Double.class));
        latitudeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(latitudeCreateInput);
        
        Message latitudeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        latitudeCreateInputMessage.setId("latitudeCreateInputMessage");
        latitudeCreateInputMessage.setFor("latitudeCreateInput");
        latitudeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(latitudeCreateInputMessage);
        
        OutputLabel longitudeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        longitudeCreateOutput.setFor("longitudeCreateInput");
        longitudeCreateOutput.setId("longitudeCreateOutput");
        longitudeCreateOutput.setValue("Longitude:");
        htmlPanelGrid.getChildren().add(longitudeCreateOutput);
        
        InputText longitudeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        longitudeCreateInput.setId("longitudeCreateInput");
        longitudeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.longitude}", Double.class));
        longitudeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(longitudeCreateInput);
        
        Message longitudeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        longitudeCreateInputMessage.setId("longitudeCreateInputMessage");
        longitudeCreateInputMessage.setFor("longitudeCreateInput");
        longitudeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(longitudeCreateInputMessage);
        
        HtmlOutputText childrenCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        childrenCreateOutput.setId("childrenCreateOutput");
        childrenCreateOutput.setValue("Children:");
        htmlPanelGrid.getChildren().add(childrenCreateOutput);
        
        HtmlOutputText childrenCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        childrenCreateInput.setId("childrenCreateInput");
        childrenCreateInput.setValue("This relationship is managed from the Location side");
        htmlPanelGrid.getChildren().add(childrenCreateInput);
        
        Message childrenCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        childrenCreateInputMessage.setId("childrenCreateInputMessage");
        childrenCreateInputMessage.setFor("childrenCreateInput");
        childrenCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(childrenCreateInputMessage);
        
        HtmlOutputText nationalityCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nationalityCreateOutput.setId("nationalityCreateOutput");
        nationalityCreateOutput.setValue("Nationality:");
        htmlPanelGrid.getChildren().add(nationalityCreateOutput);
        
        HtmlOutputText nationalityCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nationalityCreateInput.setId("nationalityCreateInput");
        nationalityCreateInput.setValue("This relationship is managed from the Nationality side");
        htmlPanelGrid.getChildren().add(nationalityCreateInput);
        
        Message nationalityCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nationalityCreateInputMessage.setId("nationalityCreateInputMessage");
        nationalityCreateInputMessage.setFor("nationalityCreateInput");
        nationalityCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nationalityCreateInputMessage);
        
        OutputLabel labelKeyCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        labelKeyCreateOutput.setFor("labelKeyCreateInput");
        labelKeyCreateOutput.setId("labelKeyCreateOutput");
        labelKeyCreateOutput.setValue("Label Key:");
        htmlPanelGrid.getChildren().add(labelKeyCreateOutput);
        
        InputTextarea labelKeyCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        labelKeyCreateInput.setId("labelKeyCreateInput");
        labelKeyCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.labelKey}", String.class));
        LengthValidator labelKeyCreateInputValidator = new LengthValidator();
        labelKeyCreateInputValidator.setMaximum(128);
        labelKeyCreateInput.addValidator(labelKeyCreateInputValidator);
        labelKeyCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(labelKeyCreateInput);
        
        Message labelKeyCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        labelKeyCreateInputMessage.setId("labelKeyCreateInputMessage");
        labelKeyCreateInputMessage.setFor("labelKeyCreateInput");
        labelKeyCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(labelKeyCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid LocationBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel deletedEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        deletedEditOutput.setFor("deletedEditInput");
        deletedEditOutput.setId("deletedEditOutput");
        deletedEditOutput.setValue("Deleted:");
        htmlPanelGrid.getChildren().add(deletedEditOutput);
        
        SelectBooleanCheckbox deletedEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        deletedEditInput.setId("deletedEditInput");
        deletedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.deleted}", Boolean.class));
        deletedEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(deletedEditInput);
        
        Message deletedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        deletedEditInputMessage.setId("deletedEditInputMessage");
        deletedEditInputMessage.setFor("deletedEditInput");
        deletedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(deletedEditInputMessage);
        
        OutputLabel creationDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateEditOutput.setFor("creationDateEditInput");
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        OutputLabel updateDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updateDateEditOutput.setFor("updateDateEditInput");
        updateDateEditOutput.setId("updateDateEditOutput");
        updateDateEditOutput.setValue("Update Date:");
        htmlPanelGrid.getChildren().add(updateDateEditOutput);
        
        Calendar updateDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updateDateEditInput.setId("updateDateEditInput");
        updateDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.updateDate}", Date.class));
        updateDateEditInput.setNavigator(true);
        updateDateEditInput.setEffect("slideDown");
        updateDateEditInput.setPattern("dd/MM/yyyy");
        updateDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updateDateEditInput);
        
        Message updateDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updateDateEditInputMessage.setId("updateDateEditInputMessage");
        updateDateEditInputMessage.setFor("updateDateEditInput");
        updateDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updateDateEditInputMessage);
        
        OutputLabel parentEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        parentEditOutput.setFor("parentEditInput");
        parentEditOutput.setId("parentEditOutput");
        parentEditOutput.setValue("Parent:");
        htmlPanelGrid.getChildren().add(parentEditOutput);
        
        AutoComplete parentEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        parentEditInput.setId("parentEditInput");
        parentEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.parent}", Location.class));
        parentEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{locationBean.completeParent}", List.class, new Class[] { String.class }));
        parentEditInput.setDropdown(true);
        parentEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "parent", String.class));
        parentEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{parent.creationDate} #{parent.updateDate} #{parent.name} #{parent.code}", String.class));
        parentEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{parent}", Location.class));
        parentEditInput.setConverter(new LocationConverter());
        parentEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(parentEditInput);
        
        Message parentEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        parentEditInputMessage.setId("parentEditInputMessage");
        parentEditInputMessage.setFor("parentEditInput");
        parentEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(parentEditInputMessage);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputTextarea nameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(64);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel codeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        codeEditOutput.setFor("codeEditInput");
        codeEditOutput.setId("codeEditOutput");
        codeEditOutput.setValue("Code:");
        htmlPanelGrid.getChildren().add(codeEditOutput);
        
        InputText codeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codeEditInput.setId("codeEditInput");
        codeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.code}", String.class));
        LengthValidator codeEditInputValidator = new LengthValidator();
        codeEditInputValidator.setMaximum(2);
        codeEditInput.addValidator(codeEditInputValidator);
        codeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(codeEditInput);
        
        Message codeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codeEditInputMessage.setId("codeEditInputMessage");
        codeEditInputMessage.setFor("codeEditInput");
        codeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codeEditInputMessage);
        
        OutputLabel appCurrentEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        appCurrentEditOutput.setFor("appCurrentEditInput");
        appCurrentEditOutput.setId("appCurrentEditOutput");
        appCurrentEditOutput.setValue("App Current:");
        htmlPanelGrid.getChildren().add(appCurrentEditOutput);
        
        SelectBooleanCheckbox appCurrentEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        appCurrentEditInput.setId("appCurrentEditInput");
        appCurrentEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.appCurrent}", Boolean.class));
        appCurrentEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(appCurrentEditInput);
        
        Message appCurrentEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        appCurrentEditInputMessage.setId("appCurrentEditInputMessage");
        appCurrentEditInputMessage.setFor("appCurrentEditInput");
        appCurrentEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(appCurrentEditInputMessage);
        
        OutputLabel latitudeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        latitudeEditOutput.setFor("latitudeEditInput");
        latitudeEditOutput.setId("latitudeEditOutput");
        latitudeEditOutput.setValue("Latitude:");
        htmlPanelGrid.getChildren().add(latitudeEditOutput);
        
        InputText latitudeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        latitudeEditInput.setId("latitudeEditInput");
        latitudeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.latitude}", Double.class));
        latitudeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(latitudeEditInput);
        
        Message latitudeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        latitudeEditInputMessage.setId("latitudeEditInputMessage");
        latitudeEditInputMessage.setFor("latitudeEditInput");
        latitudeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(latitudeEditInputMessage);
        
        OutputLabel longitudeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        longitudeEditOutput.setFor("longitudeEditInput");
        longitudeEditOutput.setId("longitudeEditOutput");
        longitudeEditOutput.setValue("Longitude:");
        htmlPanelGrid.getChildren().add(longitudeEditOutput);
        
        InputText longitudeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        longitudeEditInput.setId("longitudeEditInput");
        longitudeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.longitude}", Double.class));
        longitudeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(longitudeEditInput);
        
        Message longitudeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        longitudeEditInputMessage.setId("longitudeEditInputMessage");
        longitudeEditInputMessage.setFor("longitudeEditInput");
        longitudeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(longitudeEditInputMessage);
        
        HtmlOutputText childrenEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        childrenEditOutput.setId("childrenEditOutput");
        childrenEditOutput.setValue("Children:");
        htmlPanelGrid.getChildren().add(childrenEditOutput);
        
        HtmlOutputText childrenEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        childrenEditInput.setId("childrenEditInput");
        childrenEditInput.setValue("This relationship is managed from the Location side");
        htmlPanelGrid.getChildren().add(childrenEditInput);
        
        Message childrenEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        childrenEditInputMessage.setId("childrenEditInputMessage");
        childrenEditInputMessage.setFor("childrenEditInput");
        childrenEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(childrenEditInputMessage);
        
        HtmlOutputText nationalityEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nationalityEditOutput.setId("nationalityEditOutput");
        nationalityEditOutput.setValue("Nationality:");
        htmlPanelGrid.getChildren().add(nationalityEditOutput);
        
        HtmlOutputText nationalityEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nationalityEditInput.setId("nationalityEditInput");
        nationalityEditInput.setValue("This relationship is managed from the Nationality side");
        htmlPanelGrid.getChildren().add(nationalityEditInput);
        
        Message nationalityEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nationalityEditInputMessage.setId("nationalityEditInputMessage");
        nationalityEditInputMessage.setFor("nationalityEditInput");
        nationalityEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nationalityEditInputMessage);
        
        OutputLabel labelKeyEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        labelKeyEditOutput.setFor("labelKeyEditInput");
        labelKeyEditOutput.setId("labelKeyEditOutput");
        labelKeyEditOutput.setValue("Label Key:");
        htmlPanelGrid.getChildren().add(labelKeyEditOutput);
        
        InputTextarea labelKeyEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        labelKeyEditInput.setId("labelKeyEditInput");
        labelKeyEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.labelKey}", String.class));
        LengthValidator labelKeyEditInputValidator = new LengthValidator();
        labelKeyEditInputValidator.setMaximum(128);
        labelKeyEditInput.addValidator(labelKeyEditInputValidator);
        labelKeyEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(labelKeyEditInput);
        
        Message labelKeyEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        labelKeyEditInputMessage.setId("labelKeyEditInputMessage");
        labelKeyEditInputMessage.setFor("labelKeyEditInput");
        labelKeyEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(labelKeyEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid LocationBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText deletedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        deletedLabel.setId("deletedLabel");
        deletedLabel.setValue("Deleted:");
        htmlPanelGrid.getChildren().add(deletedLabel);
        
        HtmlOutputText deletedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        deletedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.deleted}", String.class));
        htmlPanelGrid.getChildren().add(deletedValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText updateDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateDateLabel.setId("updateDateLabel");
        updateDateLabel.setValue("Update Date:");
        htmlPanelGrid.getChildren().add(updateDateLabel);
        
        HtmlOutputText updateDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.updateDate}", Date.class));
        DateTimeConverter updateDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updateDateValueConverter.setPattern("dd/MM/yyyy");
        updateDateValue.setConverter(updateDateValueConverter);
        htmlPanelGrid.getChildren().add(updateDateValue);
        
        HtmlOutputText parentLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        parentLabel.setId("parentLabel");
        parentLabel.setValue("Parent:");
        htmlPanelGrid.getChildren().add(parentLabel);
        
        HtmlOutputText parentValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        parentValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.parent}", Location.class));
        parentValue.setConverter(new LocationConverter());
        htmlPanelGrid.getChildren().add(parentValue);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        InputTextarea nameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.name}", String.class));
        nameValue.setReadonly(true);
        nameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText codeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codeLabel.setId("codeLabel");
        codeLabel.setValue("Code:");
        htmlPanelGrid.getChildren().add(codeLabel);
        
        HtmlOutputText codeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codeValue.setId("codeValue");
        codeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.code}", String.class));
        htmlPanelGrid.getChildren().add(codeValue);
        
        HtmlOutputText appCurrentLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        appCurrentLabel.setId("appCurrentLabel");
        appCurrentLabel.setValue("App Current:");
        htmlPanelGrid.getChildren().add(appCurrentLabel);
        
        HtmlOutputText appCurrentValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        appCurrentValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.appCurrent}", String.class));
        htmlPanelGrid.getChildren().add(appCurrentValue);
        
        HtmlOutputText latitudeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        latitudeLabel.setId("latitudeLabel");
        latitudeLabel.setValue("Latitude:");
        htmlPanelGrid.getChildren().add(latitudeLabel);
        
        HtmlOutputText latitudeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        latitudeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.latitude}", String.class));
        htmlPanelGrid.getChildren().add(latitudeValue);
        
        HtmlOutputText longitudeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        longitudeLabel.setId("longitudeLabel");
        longitudeLabel.setValue("Longitude:");
        htmlPanelGrid.getChildren().add(longitudeLabel);
        
        HtmlOutputText longitudeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        longitudeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.longitude}", String.class));
        htmlPanelGrid.getChildren().add(longitudeValue);
        
        HtmlOutputText childrenLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        childrenLabel.setId("childrenLabel");
        childrenLabel.setValue("Children:");
        htmlPanelGrid.getChildren().add(childrenLabel);
        
        HtmlOutputText childrenValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        childrenValue.setId("childrenValue");
        childrenValue.setValue("This relationship is managed from the Location side");
        htmlPanelGrid.getChildren().add(childrenValue);
        
        HtmlOutputText nationalityLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nationalityLabel.setId("nationalityLabel");
        nationalityLabel.setValue("Nationality:");
        htmlPanelGrid.getChildren().add(nationalityLabel);
        
        HtmlOutputText nationalityValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nationalityValue.setId("nationalityValue");
        nationalityValue.setValue("This relationship is managed from the Nationality side");
        htmlPanelGrid.getChildren().add(nationalityValue);
        
        HtmlOutputText labelKeyLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        labelKeyLabel.setId("labelKeyLabel");
        labelKeyLabel.setValue("Label Key:");
        htmlPanelGrid.getChildren().add(labelKeyLabel);
        
        InputTextarea labelKeyValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        labelKeyValue.setId("labelKeyValue");
        labelKeyValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{locationBean.location.labelKey}", String.class));
        labelKeyValue.setReadonly(true);
        labelKeyValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(labelKeyValue);
        
        return htmlPanelGrid;
    }
    
    public Location LocationBean.getLocation() {
        if (location == null) {
            location = new Location();
        }
        return location;
    }
    
    public void LocationBean.setLocation(Location location) {
        this.location = location;
    }
    
    public List<Location> LocationBean.completeParent(String query) {
        List<Location> suggestions = new ArrayList<Location>();
        for (Location location : locationService.findAllLocations()) {
            String locationStr = String.valueOf(location.getCreationDate() +  " "  + location.getUpdateDate() +  " "  + location.getName() +  " "  + location.getCode());
            if (locationStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(location);
            }
        }
        return suggestions;
    }
    
    public List<Location> LocationBean.getSelectedChildren() {
        return selectedChildren;
    }
    
    public void LocationBean.setSelectedChildren(List<Location> selectedChildren) {
        if (selectedChildren != null) {
            location.setChildren(new HashSet<Location>(selectedChildren));
        }
        this.selectedChildren = selectedChildren;
    }
    
    public List<Nationality> LocationBean.completeNationality(String query) {
        List<Nationality> suggestions = new ArrayList<Nationality>();
        for (Nationality nationality : nationalityDAO.findAll()) {
            String nationalityStr = String.valueOf(nationality.getLabelKey() +  " "  + nationality.getName());
            if (nationalityStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(nationality);
            }
        }
        return suggestions;
    }
    
    public String LocationBean.onEdit() {
        if (location != null && location.getChildren() != null) {
            selectedChildren = new ArrayList<Location>(location.getChildren());
        }
        return null;
    }
    
    public boolean LocationBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void LocationBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String LocationBean.displayList() {
        createDialogVisible = false;
        findAllLocations();
        return "location";
    }
    
    public String LocationBean.displayCreateDialog() {
        location = new Location();
        createDialogVisible = true;
        return "location";
    }
    
    public String LocationBean.persist() {
        String message = "";
        if (location.getId() != null) {
            locationService.updateLocation(location);
            message = "message_successfully_updated";
        } else {
            locationService.saveLocation(location);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Location");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllLocations();
    }
    
    public String LocationBean.delete() {
        locationService.deleteLocation(location);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Location");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllLocations();
    }
    
    public void LocationBean.reset() {
        location = null;
        selectedChildren = null;
        createDialogVisible = false;
    }
    
    public void LocationBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
