// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bytepoxic.core.web.jsf;

import com.bytepoxic.core.web.jsf.FooBean;
import com.bytepoxic.core.web.jsf.util.MessageFactory;
import com.bytepoxic.example.model.Foo;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect FooBean_Roo_ManagedBean {
    
    declare @type: FooBean: @ManagedBean(name = "fooBean");
    
    declare @type: FooBean: @SessionScoped;
    
    private String FooBean.name = "Foos";
    
    private Foo FooBean.foo;
    
    private List<Foo> FooBean.allFoos;
    
    private boolean FooBean.dataVisible = false;
    
    private List<String> FooBean.columns;
    
    private HtmlPanelGrid FooBean.createPanelGrid;
    
    private HtmlPanelGrid FooBean.editPanelGrid;
    
    private HtmlPanelGrid FooBean.viewPanelGrid;
    
    private boolean FooBean.createDialogVisible = false;
    
    @PostConstruct
    public void FooBean.init() {
        columns = new ArrayList<String>();
        columns.add("num");
        columns.add("name");
    }
    
    public String FooBean.getName() {
        return name;
    }
    
    public List<String> FooBean.getColumns() {
        return columns;
    }
    
    public List<Foo> FooBean.getAllFoos() {
        return allFoos;
    }
    
    public void FooBean.setAllFoos(List<Foo> allFoos) {
        this.allFoos = allFoos;
    }
    
    public String FooBean.findAllFoos() {
        allFoos = Foo.findAllFoos();
        dataVisible = !allFoos.isEmpty();
        return null;
    }
    
    public boolean FooBean.isDataVisible() {
        return dataVisible;
    }
    
    public void FooBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid FooBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void FooBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid FooBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void FooBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid FooBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void FooBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid FooBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel numCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        numCreateOutput.setFor("numCreateInput");
        numCreateOutput.setId("numCreateOutput");
        numCreateOutput.setValue("Num:");
        htmlPanelGrid.getChildren().add(numCreateOutput);
        
        Spinner numCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        numCreateInput.setId("numCreateInput");
        numCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fooBean.foo.num}", Integer.class));
        numCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(numCreateInput);
        
        Message numCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numCreateInputMessage.setId("numCreateInputMessage");
        numCreateInputMessage.setFor("numCreateInput");
        numCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numCreateInputMessage);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fooBean.foo.name}", String.class));
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid FooBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel numEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        numEditOutput.setFor("numEditInput");
        numEditOutput.setId("numEditOutput");
        numEditOutput.setValue("Num:");
        htmlPanelGrid.getChildren().add(numEditOutput);
        
        Spinner numEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        numEditInput.setId("numEditInput");
        numEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fooBean.foo.num}", Integer.class));
        numEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(numEditInput);
        
        Message numEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numEditInputMessage.setId("numEditInputMessage");
        numEditInputMessage.setFor("numEditInput");
        numEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numEditInputMessage);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fooBean.foo.name}", String.class));
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid FooBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText numLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numLabel.setId("numLabel");
        numLabel.setValue("Num:");
        htmlPanelGrid.getChildren().add(numLabel);
        
        HtmlOutputText numValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fooBean.foo.num}", String.class));
        htmlPanelGrid.getChildren().add(numValue);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fooBean.foo.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        return htmlPanelGrid;
    }
    
    public Foo FooBean.getFoo() {
        if (foo == null) {
            foo = new Foo();
        }
        return foo;
    }
    
    public void FooBean.setFoo(Foo foo) {
        this.foo = foo;
    }
    
    public String FooBean.onEdit() {
        return null;
    }
    
    public boolean FooBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void FooBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String FooBean.displayList() {
        createDialogVisible = false;
        findAllFoos();
        return "foo";
    }
    
    public String FooBean.displayCreateDialog() {
        foo = new Foo();
        createDialogVisible = true;
        return "foo";
    }
    
    public String FooBean.persist() {
        String message = "";
        if (foo.getId() != null) {
            foo.merge();
            message = "message_successfully_updated";
        } else {
            foo.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Foo");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllFoos();
    }
    
    public String FooBean.delete() {
        foo.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Foo");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllFoos();
    }
    
    public void FooBean.reset() {
        foo = null;
        createDialogVisible = false;
    }
    
    public void FooBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
