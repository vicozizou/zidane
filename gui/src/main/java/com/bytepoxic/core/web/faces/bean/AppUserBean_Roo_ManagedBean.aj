// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bytepoxic.core.web.faces.bean;

import com.bytepoxic.core.dao.NationalityDAO;
import com.bytepoxic.core.dao.PlaceDAO;
import com.bytepoxic.core.model.AppRole;
import com.bytepoxic.core.model.AppUser;
import com.bytepoxic.core.model.Email;
import com.bytepoxic.core.model.Gender;
import com.bytepoxic.core.model.IdentificationType;
import com.bytepoxic.core.model.Nationality;
import com.bytepoxic.core.model.Phone;
import com.bytepoxic.core.model.Place;
import com.bytepoxic.core.model.UserStatus;
import com.bytepoxic.core.service.UserService;
import com.bytepoxic.core.web.faces.bean.AppUserBean;
import com.bytepoxic.core.web.faces.bean.converter.AppRoleConverter;
import com.bytepoxic.core.web.faces.bean.converter.NationalityConverter;
import com.bytepoxic.core.web.faces.bean.converter.PlaceConverter;
import com.bytepoxic.core.web.faces.bean.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect AppUserBean_Roo_ManagedBean {
    
    declare @type: AppUserBean: @ManagedBean(name = "appUserBean");
    
    declare @type: AppUserBean: @SessionScoped;
    
    @Autowired
    UserService AppUserBean.userService;
    
    @Autowired
    NationalityDAO AppUserBean.nationalityDAO;
    
    @Autowired
    PlaceDAO AppUserBean.placeDAO;
    
    private String AppUserBean.name = "AppUsers";
    
    private AppUser AppUserBean.appUser;
    
    private List<AppUser> AppUserBean.allAppUsers;
    
    private boolean AppUserBean.dataVisible = false;
    
    private List<String> AppUserBean.columns;
    
    private HtmlPanelGrid AppUserBean.createPanelGrid;
    
    private HtmlPanelGrid AppUserBean.editPanelGrid;
    
    private HtmlPanelGrid AppUserBean.viewPanelGrid;
    
    private boolean AppUserBean.createDialogVisible = false;
    
    private List<Phone> AppUserBean.selectedPhones;
    
    private List<Email> AppUserBean.selectedEmails;
    
    private List<AppRole> AppUserBean.selectedRoles;
    
    @PostConstruct
    public void AppUserBean.init() {
        columns = new ArrayList<String>();
        columns.add("creationDate");
        columns.add("updateDate");
        columns.add("names");
        columns.add("surnames");
        columns.add("birthday");
    }
    
    public String AppUserBean.getName() {
        return name;
    }
    
    public List<String> AppUserBean.getColumns() {
        return columns;
    }
    
    public List<AppUser> AppUserBean.getAllAppUsers() {
        return allAppUsers;
    }
    
    public void AppUserBean.setAllAppUsers(List<AppUser> allAppUsers) {
        this.allAppUsers = allAppUsers;
    }
    
    public String AppUserBean.findAllAppUsers() {
        allAppUsers = userService.findAllAppUsers();
        dataVisible = !allAppUsers.isEmpty();
        return null;
    }
    
    public boolean AppUserBean.isDataVisible() {
        return dataVisible;
    }
    
    public void AppUserBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid AppUserBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void AppUserBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid AppUserBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void AppUserBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid AppUserBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void AppUserBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid AppUserBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel deletedCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        deletedCreateOutput.setFor("deletedCreateInput");
        deletedCreateOutput.setId("deletedCreateOutput");
        deletedCreateOutput.setValue("Deleted:");
        htmlPanelGrid.getChildren().add(deletedCreateOutput);
        
        SelectBooleanCheckbox deletedCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        deletedCreateInput.setId("deletedCreateInput");
        deletedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.deleted}", Boolean.class));
        deletedCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(deletedCreateInput);
        
        Message deletedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        deletedCreateInputMessage.setId("deletedCreateInputMessage");
        deletedCreateInputMessage.setFor("deletedCreateInput");
        deletedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(deletedCreateInputMessage);
        
        OutputLabel creationDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateCreateOutput.setFor("creationDateCreateInput");
        creationDateCreateOutput.setId("creationDateCreateOutput");
        creationDateCreateOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateCreateOutput);
        
        Calendar creationDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateCreateInput.setId("creationDateCreateInput");
        creationDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.creationDate}", Date.class));
        creationDateCreateInput.setNavigator(true);
        creationDateCreateInput.setEffect("slideDown");
        creationDateCreateInput.setPattern("dd/MM/yyyy");
        creationDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateCreateInput);
        
        Message creationDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateCreateInputMessage.setId("creationDateCreateInputMessage");
        creationDateCreateInputMessage.setFor("creationDateCreateInput");
        creationDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateCreateInputMessage);
        
        OutputLabel updateDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updateDateCreateOutput.setFor("updateDateCreateInput");
        updateDateCreateOutput.setId("updateDateCreateOutput");
        updateDateCreateOutput.setValue("Update Date:");
        htmlPanelGrid.getChildren().add(updateDateCreateOutput);
        
        Calendar updateDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updateDateCreateInput.setId("updateDateCreateInput");
        updateDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.updateDate}", Date.class));
        updateDateCreateInput.setNavigator(true);
        updateDateCreateInput.setEffect("slideDown");
        updateDateCreateInput.setPattern("dd/MM/yyyy");
        updateDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updateDateCreateInput);
        
        Message updateDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updateDateCreateInputMessage.setId("updateDateCreateInputMessage");
        updateDateCreateInputMessage.setFor("updateDateCreateInput");
        updateDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updateDateCreateInputMessage);
        
        OutputLabel namesCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        namesCreateOutput.setFor("namesCreateInput");
        namesCreateOutput.setId("namesCreateOutput");
        namesCreateOutput.setValue("Names:");
        htmlPanelGrid.getChildren().add(namesCreateOutput);
        
        InputTextarea namesCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        namesCreateInput.setId("namesCreateInput");
        namesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.names}", String.class));
        LengthValidator namesCreateInputValidator = new LengthValidator();
        namesCreateInputValidator.setMaximum(128);
        namesCreateInput.addValidator(namesCreateInputValidator);
        namesCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(namesCreateInput);
        
        Message namesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        namesCreateInputMessage.setId("namesCreateInputMessage");
        namesCreateInputMessage.setFor("namesCreateInput");
        namesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(namesCreateInputMessage);
        
        OutputLabel surnamesCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        surnamesCreateOutput.setFor("surnamesCreateInput");
        surnamesCreateOutput.setId("surnamesCreateOutput");
        surnamesCreateOutput.setValue("Surnames:");
        htmlPanelGrid.getChildren().add(surnamesCreateOutput);
        
        InputTextarea surnamesCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        surnamesCreateInput.setId("surnamesCreateInput");
        surnamesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.surnames}", String.class));
        LengthValidator surnamesCreateInputValidator = new LengthValidator();
        surnamesCreateInputValidator.setMaximum(128);
        surnamesCreateInput.addValidator(surnamesCreateInputValidator);
        surnamesCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(surnamesCreateInput);
        
        Message surnamesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        surnamesCreateInputMessage.setId("surnamesCreateInputMessage");
        surnamesCreateInputMessage.setFor("surnamesCreateInput");
        surnamesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(surnamesCreateInputMessage);
        
        OutputLabel genderCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        genderCreateOutput.setFor("genderCreateInput");
        genderCreateOutput.setId("genderCreateOutput");
        genderCreateOutput.setValue("Gender:");
        htmlPanelGrid.getChildren().add(genderCreateOutput);
        
        AutoComplete genderCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        genderCreateInput.setId("genderCreateInput");
        genderCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.gender}", Gender.class));
        genderCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{appUserBean.completeGender}", List.class, new Class[] { String.class }));
        genderCreateInput.setDropdown(true);
        genderCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(genderCreateInput);
        
        Message genderCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        genderCreateInputMessage.setId("genderCreateInputMessage");
        genderCreateInputMessage.setFor("genderCreateInput");
        genderCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(genderCreateInputMessage);
        
        OutputLabel birthdayCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        birthdayCreateOutput.setFor("birthdayCreateInput");
        birthdayCreateOutput.setId("birthdayCreateOutput");
        birthdayCreateOutput.setValue("Birthday:");
        htmlPanelGrid.getChildren().add(birthdayCreateOutput);
        
        Calendar birthdayCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        birthdayCreateInput.setId("birthdayCreateInput");
        birthdayCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.birthday}", Date.class));
        birthdayCreateInput.setNavigator(true);
        birthdayCreateInput.setEffect("slideDown");
        birthdayCreateInput.setPattern("dd/MM/yyyy");
        birthdayCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(birthdayCreateInput);
        
        Message birthdayCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        birthdayCreateInputMessage.setId("birthdayCreateInputMessage");
        birthdayCreateInputMessage.setFor("birthdayCreateInput");
        birthdayCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(birthdayCreateInputMessage);
        
        OutputLabel identificationCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        identificationCreateOutput.setFor("identificationCreateInput");
        identificationCreateOutput.setId("identificationCreateOutput");
        identificationCreateOutput.setValue("Identification:");
        htmlPanelGrid.getChildren().add(identificationCreateOutput);
        
        InputTextarea identificationCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        identificationCreateInput.setId("identificationCreateInput");
        identificationCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.identification}", String.class));
        LengthValidator identificationCreateInputValidator = new LengthValidator();
        identificationCreateInputValidator.setMaximum(64);
        identificationCreateInput.addValidator(identificationCreateInputValidator);
        identificationCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(identificationCreateInput);
        
        Message identificationCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identificationCreateInputMessage.setId("identificationCreateInputMessage");
        identificationCreateInputMessage.setFor("identificationCreateInput");
        identificationCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identificationCreateInputMessage);
        
        OutputLabel identificationTypeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        identificationTypeCreateOutput.setFor("identificationTypeCreateInput");
        identificationTypeCreateOutput.setId("identificationTypeCreateOutput");
        identificationTypeCreateOutput.setValue("Identification Type:");
        htmlPanelGrid.getChildren().add(identificationTypeCreateOutput);
        
        AutoComplete identificationTypeCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        identificationTypeCreateInput.setId("identificationTypeCreateInput");
        identificationTypeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.identificationType}", IdentificationType.class));
        identificationTypeCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{appUserBean.completeIdentificationType}", List.class, new Class[] { String.class }));
        identificationTypeCreateInput.setDropdown(true);
        identificationTypeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(identificationTypeCreateInput);
        
        Message identificationTypeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identificationTypeCreateInputMessage.setId("identificationTypeCreateInputMessage");
        identificationTypeCreateInputMessage.setFor("identificationTypeCreateInput");
        identificationTypeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identificationTypeCreateInputMessage);
        
        OutputLabel nationalityCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nationalityCreateOutput.setFor("nationalityCreateInput");
        nationalityCreateOutput.setId("nationalityCreateOutput");
        nationalityCreateOutput.setValue("Nationality:");
        htmlPanelGrid.getChildren().add(nationalityCreateOutput);
        
        AutoComplete nationalityCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        nationalityCreateInput.setId("nationalityCreateInput");
        nationalityCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.nationality}", Nationality.class));
        nationalityCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{appUserBean.completeNationality}", List.class, new Class[] { String.class }));
        nationalityCreateInput.setDropdown(true);
        nationalityCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "nationality", String.class));
        nationalityCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{nationality.labelKey} #{nationality.name}", String.class));
        nationalityCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{nationality}", Nationality.class));
        nationalityCreateInput.setConverter(new NationalityConverter());
        nationalityCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(nationalityCreateInput);
        
        Message nationalityCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nationalityCreateInputMessage.setId("nationalityCreateInputMessage");
        nationalityCreateInputMessage.setFor("nationalityCreateInput");
        nationalityCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nationalityCreateInputMessage);
        
        OutputLabel homePlaceCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        homePlaceCreateOutput.setFor("homePlaceCreateInput");
        homePlaceCreateOutput.setId("homePlaceCreateOutput");
        homePlaceCreateOutput.setValue("Home Place:");
        htmlPanelGrid.getChildren().add(homePlaceCreateOutput);
        
        AutoComplete homePlaceCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        homePlaceCreateInput.setId("homePlaceCreateInput");
        homePlaceCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.homePlace}", Place.class));
        homePlaceCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{appUserBean.completeHomePlace}", List.class, new Class[] { String.class }));
        homePlaceCreateInput.setDropdown(true);
        homePlaceCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "homePlace", String.class));
        homePlaceCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{homePlace.name} #{homePlace.primaryAddress} #{homePlace.secondaryAddress} #{homePlace.latitude}", String.class));
        homePlaceCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{homePlace}", Place.class));
        homePlaceCreateInput.setConverter(new PlaceConverter());
        homePlaceCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(homePlaceCreateInput);
        
        Message homePlaceCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        homePlaceCreateInputMessage.setId("homePlaceCreateInputMessage");
        homePlaceCreateInputMessage.setFor("homePlaceCreateInput");
        homePlaceCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(homePlaceCreateInputMessage);
        
        OutputLabel workPlaceCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workPlaceCreateOutput.setFor("workPlaceCreateInput");
        workPlaceCreateOutput.setId("workPlaceCreateOutput");
        workPlaceCreateOutput.setValue("Work Place:");
        htmlPanelGrid.getChildren().add(workPlaceCreateOutput);
        
        AutoComplete workPlaceCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        workPlaceCreateInput.setId("workPlaceCreateInput");
        workPlaceCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.workPlace}", Place.class));
        workPlaceCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{appUserBean.completeWorkPlace}", List.class, new Class[] { String.class }));
        workPlaceCreateInput.setDropdown(true);
        workPlaceCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "workPlace", String.class));
        workPlaceCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{workPlace.name} #{workPlace.primaryAddress} #{workPlace.secondaryAddress} #{workPlace.latitude}", String.class));
        workPlaceCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{workPlace}", Place.class));
        workPlaceCreateInput.setConverter(new PlaceConverter());
        workPlaceCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(workPlaceCreateInput);
        
        Message workPlaceCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workPlaceCreateInputMessage.setId("workPlaceCreateInputMessage");
        workPlaceCreateInputMessage.setFor("workPlaceCreateInput");
        workPlaceCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workPlaceCreateInputMessage);
        
        HtmlOutputText phonesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        phonesCreateOutput.setId("phonesCreateOutput");
        phonesCreateOutput.setValue("Phones:");
        htmlPanelGrid.getChildren().add(phonesCreateOutput);
        
        HtmlOutputText phonesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        phonesCreateInput.setId("phonesCreateInput");
        phonesCreateInput.setValue("This relationship is managed from the Phone side");
        htmlPanelGrid.getChildren().add(phonesCreateInput);
        
        Message phonesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        phonesCreateInputMessage.setId("phonesCreateInputMessage");
        phonesCreateInputMessage.setFor("phonesCreateInput");
        phonesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(phonesCreateInputMessage);
        
        HtmlOutputText emailsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailsCreateOutput.setId("emailsCreateOutput");
        emailsCreateOutput.setValue("Emails:");
        htmlPanelGrid.getChildren().add(emailsCreateOutput);
        
        HtmlOutputText emailsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailsCreateInput.setId("emailsCreateInput");
        emailsCreateInput.setValue("This relationship is managed from the Email side");
        htmlPanelGrid.getChildren().add(emailsCreateInput);
        
        Message emailsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailsCreateInputMessage.setId("emailsCreateInputMessage");
        emailsCreateInputMessage.setFor("emailsCreateInput");
        emailsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailsCreateInputMessage);
        
        OutputLabel authoritiesCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        authoritiesCreateOutput.setFor("authoritiesCreateInput");
        authoritiesCreateOutput.setId("authoritiesCreateOutput");
        authoritiesCreateOutput.setValue("Authorities:");
        htmlPanelGrid.getChildren().add(authoritiesCreateOutput);
        
        InputText authoritiesCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        authoritiesCreateInput.setId("authoritiesCreateInput");
        authoritiesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.authorities}", Set.class));
        authoritiesCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(authoritiesCreateInput);
        
        Message authoritiesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        authoritiesCreateInputMessage.setId("authoritiesCreateInputMessage");
        authoritiesCreateInputMessage.setFor("authoritiesCreateInput");
        authoritiesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(authoritiesCreateInputMessage);
        
        OutputLabel usernameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        usernameCreateOutput.setFor("usernameCreateInput");
        usernameCreateOutput.setId("usernameCreateOutput");
        usernameCreateOutput.setValue("Username:");
        htmlPanelGrid.getChildren().add(usernameCreateOutput);
        
        InputTextarea usernameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        usernameCreateInput.setId("usernameCreateInput");
        usernameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.username}", String.class));
        LengthValidator usernameCreateInputValidator = new LengthValidator();
        usernameCreateInputValidator.setMaximum(32);
        usernameCreateInput.addValidator(usernameCreateInputValidator);
        usernameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(usernameCreateInput);
        
        Message usernameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        usernameCreateInputMessage.setId("usernameCreateInputMessage");
        usernameCreateInputMessage.setFor("usernameCreateInput");
        usernameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(usernameCreateInputMessage);
        
        OutputLabel passwordCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        passwordCreateOutput.setFor("passwordCreateInput");
        passwordCreateOutput.setId("passwordCreateOutput");
        passwordCreateOutput.setValue("Password:");
        htmlPanelGrid.getChildren().add(passwordCreateOutput);
        
        InputTextarea passwordCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        passwordCreateInput.setId("passwordCreateInput");
        passwordCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.password}", String.class));
        LengthValidator passwordCreateInputValidator = new LengthValidator();
        passwordCreateInputValidator.setMaximum(64);
        passwordCreateInput.addValidator(passwordCreateInputValidator);
        passwordCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(passwordCreateInput);
        
        Message passwordCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordCreateInputMessage.setId("passwordCreateInputMessage");
        passwordCreateInputMessage.setFor("passwordCreateInput");
        passwordCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordCreateInputMessage);
        
        OutputLabel rolesCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        rolesCreateOutput.setFor("rolesCreateInput");
        rolesCreateOutput.setId("rolesCreateOutput");
        rolesCreateOutput.setValue("Roles:");
        htmlPanelGrid.getChildren().add(rolesCreateOutput);
        
        SelectManyMenu rolesCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        rolesCreateInput.setId("rolesCreateInput");
        rolesCreateInput.setConverter(new AppRoleConverter());
        rolesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.selectedRoles}", List.class));
        UISelectItems rolesCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        rolesCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appRoleBean.allAppRoles}", List.class));
        rolesCreateInput.setRequired(true);
        rolesCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "appRole", String.class));
        rolesCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{appRole}", String.class));
        rolesCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{appRole}", AppRole.class));
        rolesCreateInput.getChildren().add(rolesCreateInputItems);
        htmlPanelGrid.getChildren().add(rolesCreateInput);
        
        Message rolesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rolesCreateInputMessage.setId("rolesCreateInputMessage");
        rolesCreateInputMessage.setFor("rolesCreateInput");
        rolesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rolesCreateInputMessage);
        
        OutputLabel userStatusCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        userStatusCreateOutput.setFor("userStatusCreateInput");
        userStatusCreateOutput.setId("userStatusCreateOutput");
        userStatusCreateOutput.setValue("User Status:");
        htmlPanelGrid.getChildren().add(userStatusCreateOutput);
        
        AutoComplete userStatusCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        userStatusCreateInput.setId("userStatusCreateInput");
        userStatusCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.userStatus}", UserStatus.class));
        userStatusCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{appUserBean.completeUserStatus}", List.class, new Class[] { String.class }));
        userStatusCreateInput.setDropdown(true);
        userStatusCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(userStatusCreateInput);
        
        Message userStatusCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        userStatusCreateInputMessage.setId("userStatusCreateInputMessage");
        userStatusCreateInputMessage.setFor("userStatusCreateInput");
        userStatusCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(userStatusCreateInputMessage);
        
        OutputLabel loginAttemptsCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        loginAttemptsCreateOutput.setFor("loginAttemptsCreateInput");
        loginAttemptsCreateOutput.setId("loginAttemptsCreateOutput");
        loginAttemptsCreateOutput.setValue("Login Attempts:");
        htmlPanelGrid.getChildren().add(loginAttemptsCreateOutput);
        
        Spinner loginAttemptsCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        loginAttemptsCreateInput.setId("loginAttemptsCreateInput");
        loginAttemptsCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.loginAttempts}", Integer.class));
        loginAttemptsCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(loginAttemptsCreateInput);
        
        Message loginAttemptsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        loginAttemptsCreateInputMessage.setId("loginAttemptsCreateInputMessage");
        loginAttemptsCreateInputMessage.setFor("loginAttemptsCreateInput");
        loginAttemptsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(loginAttemptsCreateInputMessage);
        
        OutputLabel lastLoginDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastLoginDateCreateOutput.setFor("lastLoginDateCreateInput");
        lastLoginDateCreateOutput.setId("lastLoginDateCreateOutput");
        lastLoginDateCreateOutput.setValue("Last Login Date:");
        htmlPanelGrid.getChildren().add(lastLoginDateCreateOutput);
        
        Calendar lastLoginDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        lastLoginDateCreateInput.setId("lastLoginDateCreateInput");
        lastLoginDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.lastLoginDate}", Date.class));
        lastLoginDateCreateInput.setNavigator(true);
        lastLoginDateCreateInput.setEffect("slideDown");
        lastLoginDateCreateInput.setPattern("dd/MM/yyyy");
        lastLoginDateCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(lastLoginDateCreateInput);
        
        Message lastLoginDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastLoginDateCreateInputMessage.setId("lastLoginDateCreateInputMessage");
        lastLoginDateCreateInputMessage.setFor("lastLoginDateCreateInput");
        lastLoginDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastLoginDateCreateInputMessage);
        
        OutputLabel daysToExpireCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        daysToExpireCreateOutput.setFor("daysToExpireCreateInput");
        daysToExpireCreateOutput.setId("daysToExpireCreateOutput");
        daysToExpireCreateOutput.setValue("Days To Expire:");
        htmlPanelGrid.getChildren().add(daysToExpireCreateOutput);
        
        Spinner daysToExpireCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        daysToExpireCreateInput.setId("daysToExpireCreateInput");
        daysToExpireCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.daysToExpire}", Integer.class));
        daysToExpireCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(daysToExpireCreateInput);
        
        Message daysToExpireCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        daysToExpireCreateInputMessage.setId("daysToExpireCreateInputMessage");
        daysToExpireCreateInputMessage.setFor("daysToExpireCreateInput");
        daysToExpireCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(daysToExpireCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid AppUserBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel deletedEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        deletedEditOutput.setFor("deletedEditInput");
        deletedEditOutput.setId("deletedEditOutput");
        deletedEditOutput.setValue("Deleted:");
        htmlPanelGrid.getChildren().add(deletedEditOutput);
        
        SelectBooleanCheckbox deletedEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        deletedEditInput.setId("deletedEditInput");
        deletedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.deleted}", Boolean.class));
        deletedEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(deletedEditInput);
        
        Message deletedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        deletedEditInputMessage.setId("deletedEditInputMessage");
        deletedEditInputMessage.setFor("deletedEditInput");
        deletedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(deletedEditInputMessage);
        
        OutputLabel creationDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        creationDateEditOutput.setFor("creationDateEditInput");
        creationDateEditOutput.setId("creationDateEditOutput");
        creationDateEditOutput.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateEditOutput);
        
        Calendar creationDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        creationDateEditInput.setId("creationDateEditInput");
        creationDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.creationDate}", Date.class));
        creationDateEditInput.setNavigator(true);
        creationDateEditInput.setEffect("slideDown");
        creationDateEditInput.setPattern("dd/MM/yyyy");
        creationDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(creationDateEditInput);
        
        Message creationDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        creationDateEditInputMessage.setId("creationDateEditInputMessage");
        creationDateEditInputMessage.setFor("creationDateEditInput");
        creationDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(creationDateEditInputMessage);
        
        OutputLabel updateDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        updateDateEditOutput.setFor("updateDateEditInput");
        updateDateEditOutput.setId("updateDateEditOutput");
        updateDateEditOutput.setValue("Update Date:");
        htmlPanelGrid.getChildren().add(updateDateEditOutput);
        
        Calendar updateDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updateDateEditInput.setId("updateDateEditInput");
        updateDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.updateDate}", Date.class));
        updateDateEditInput.setNavigator(true);
        updateDateEditInput.setEffect("slideDown");
        updateDateEditInput.setPattern("dd/MM/yyyy");
        updateDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updateDateEditInput);
        
        Message updateDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updateDateEditInputMessage.setId("updateDateEditInputMessage");
        updateDateEditInputMessage.setFor("updateDateEditInput");
        updateDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updateDateEditInputMessage);
        
        OutputLabel namesEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        namesEditOutput.setFor("namesEditInput");
        namesEditOutput.setId("namesEditOutput");
        namesEditOutput.setValue("Names:");
        htmlPanelGrid.getChildren().add(namesEditOutput);
        
        InputTextarea namesEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        namesEditInput.setId("namesEditInput");
        namesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.names}", String.class));
        LengthValidator namesEditInputValidator = new LengthValidator();
        namesEditInputValidator.setMaximum(128);
        namesEditInput.addValidator(namesEditInputValidator);
        namesEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(namesEditInput);
        
        Message namesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        namesEditInputMessage.setId("namesEditInputMessage");
        namesEditInputMessage.setFor("namesEditInput");
        namesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(namesEditInputMessage);
        
        OutputLabel surnamesEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        surnamesEditOutput.setFor("surnamesEditInput");
        surnamesEditOutput.setId("surnamesEditOutput");
        surnamesEditOutput.setValue("Surnames:");
        htmlPanelGrid.getChildren().add(surnamesEditOutput);
        
        InputTextarea surnamesEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        surnamesEditInput.setId("surnamesEditInput");
        surnamesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.surnames}", String.class));
        LengthValidator surnamesEditInputValidator = new LengthValidator();
        surnamesEditInputValidator.setMaximum(128);
        surnamesEditInput.addValidator(surnamesEditInputValidator);
        surnamesEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(surnamesEditInput);
        
        Message surnamesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        surnamesEditInputMessage.setId("surnamesEditInputMessage");
        surnamesEditInputMessage.setFor("surnamesEditInput");
        surnamesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(surnamesEditInputMessage);
        
        OutputLabel genderEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        genderEditOutput.setFor("genderEditInput");
        genderEditOutput.setId("genderEditOutput");
        genderEditOutput.setValue("Gender:");
        htmlPanelGrid.getChildren().add(genderEditOutput);
        
        AutoComplete genderEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        genderEditInput.setId("genderEditInput");
        genderEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.gender}", Gender.class));
        genderEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{appUserBean.completeGender}", List.class, new Class[] { String.class }));
        genderEditInput.setDropdown(true);
        genderEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(genderEditInput);
        
        Message genderEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        genderEditInputMessage.setId("genderEditInputMessage");
        genderEditInputMessage.setFor("genderEditInput");
        genderEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(genderEditInputMessage);
        
        OutputLabel birthdayEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        birthdayEditOutput.setFor("birthdayEditInput");
        birthdayEditOutput.setId("birthdayEditOutput");
        birthdayEditOutput.setValue("Birthday:");
        htmlPanelGrid.getChildren().add(birthdayEditOutput);
        
        Calendar birthdayEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        birthdayEditInput.setId("birthdayEditInput");
        birthdayEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.birthday}", Date.class));
        birthdayEditInput.setNavigator(true);
        birthdayEditInput.setEffect("slideDown");
        birthdayEditInput.setPattern("dd/MM/yyyy");
        birthdayEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(birthdayEditInput);
        
        Message birthdayEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        birthdayEditInputMessage.setId("birthdayEditInputMessage");
        birthdayEditInputMessage.setFor("birthdayEditInput");
        birthdayEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(birthdayEditInputMessage);
        
        OutputLabel identificationEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        identificationEditOutput.setFor("identificationEditInput");
        identificationEditOutput.setId("identificationEditOutput");
        identificationEditOutput.setValue("Identification:");
        htmlPanelGrid.getChildren().add(identificationEditOutput);
        
        InputTextarea identificationEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        identificationEditInput.setId("identificationEditInput");
        identificationEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.identification}", String.class));
        LengthValidator identificationEditInputValidator = new LengthValidator();
        identificationEditInputValidator.setMaximum(64);
        identificationEditInput.addValidator(identificationEditInputValidator);
        identificationEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(identificationEditInput);
        
        Message identificationEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identificationEditInputMessage.setId("identificationEditInputMessage");
        identificationEditInputMessage.setFor("identificationEditInput");
        identificationEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identificationEditInputMessage);
        
        OutputLabel identificationTypeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        identificationTypeEditOutput.setFor("identificationTypeEditInput");
        identificationTypeEditOutput.setId("identificationTypeEditOutput");
        identificationTypeEditOutput.setValue("Identification Type:");
        htmlPanelGrid.getChildren().add(identificationTypeEditOutput);
        
        AutoComplete identificationTypeEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        identificationTypeEditInput.setId("identificationTypeEditInput");
        identificationTypeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.identificationType}", IdentificationType.class));
        identificationTypeEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{appUserBean.completeIdentificationType}", List.class, new Class[] { String.class }));
        identificationTypeEditInput.setDropdown(true);
        identificationTypeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(identificationTypeEditInput);
        
        Message identificationTypeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identificationTypeEditInputMessage.setId("identificationTypeEditInputMessage");
        identificationTypeEditInputMessage.setFor("identificationTypeEditInput");
        identificationTypeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identificationTypeEditInputMessage);
        
        OutputLabel nationalityEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nationalityEditOutput.setFor("nationalityEditInput");
        nationalityEditOutput.setId("nationalityEditOutput");
        nationalityEditOutput.setValue("Nationality:");
        htmlPanelGrid.getChildren().add(nationalityEditOutput);
        
        AutoComplete nationalityEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        nationalityEditInput.setId("nationalityEditInput");
        nationalityEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.nationality}", Nationality.class));
        nationalityEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{appUserBean.completeNationality}", List.class, new Class[] { String.class }));
        nationalityEditInput.setDropdown(true);
        nationalityEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "nationality", String.class));
        nationalityEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{nationality.labelKey} #{nationality.name}", String.class));
        nationalityEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{nationality}", Nationality.class));
        nationalityEditInput.setConverter(new NationalityConverter());
        nationalityEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(nationalityEditInput);
        
        Message nationalityEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nationalityEditInputMessage.setId("nationalityEditInputMessage");
        nationalityEditInputMessage.setFor("nationalityEditInput");
        nationalityEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nationalityEditInputMessage);
        
        OutputLabel homePlaceEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        homePlaceEditOutput.setFor("homePlaceEditInput");
        homePlaceEditOutput.setId("homePlaceEditOutput");
        homePlaceEditOutput.setValue("Home Place:");
        htmlPanelGrid.getChildren().add(homePlaceEditOutput);
        
        AutoComplete homePlaceEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        homePlaceEditInput.setId("homePlaceEditInput");
        homePlaceEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.homePlace}", Place.class));
        homePlaceEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{appUserBean.completeHomePlace}", List.class, new Class[] { String.class }));
        homePlaceEditInput.setDropdown(true);
        homePlaceEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "homePlace", String.class));
        homePlaceEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{homePlace.name} #{homePlace.primaryAddress} #{homePlace.secondaryAddress} #{homePlace.latitude}", String.class));
        homePlaceEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{homePlace}", Place.class));
        homePlaceEditInput.setConverter(new PlaceConverter());
        homePlaceEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(homePlaceEditInput);
        
        Message homePlaceEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        homePlaceEditInputMessage.setId("homePlaceEditInputMessage");
        homePlaceEditInputMessage.setFor("homePlaceEditInput");
        homePlaceEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(homePlaceEditInputMessage);
        
        OutputLabel workPlaceEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        workPlaceEditOutput.setFor("workPlaceEditInput");
        workPlaceEditOutput.setId("workPlaceEditOutput");
        workPlaceEditOutput.setValue("Work Place:");
        htmlPanelGrid.getChildren().add(workPlaceEditOutput);
        
        AutoComplete workPlaceEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        workPlaceEditInput.setId("workPlaceEditInput");
        workPlaceEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.workPlace}", Place.class));
        workPlaceEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{appUserBean.completeWorkPlace}", List.class, new Class[] { String.class }));
        workPlaceEditInput.setDropdown(true);
        workPlaceEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "workPlace", String.class));
        workPlaceEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{workPlace.name} #{workPlace.primaryAddress} #{workPlace.secondaryAddress} #{workPlace.latitude}", String.class));
        workPlaceEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{workPlace}", Place.class));
        workPlaceEditInput.setConverter(new PlaceConverter());
        workPlaceEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(workPlaceEditInput);
        
        Message workPlaceEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        workPlaceEditInputMessage.setId("workPlaceEditInputMessage");
        workPlaceEditInputMessage.setFor("workPlaceEditInput");
        workPlaceEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(workPlaceEditInputMessage);
        
        HtmlOutputText phonesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        phonesEditOutput.setId("phonesEditOutput");
        phonesEditOutput.setValue("Phones:");
        htmlPanelGrid.getChildren().add(phonesEditOutput);
        
        HtmlOutputText phonesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        phonesEditInput.setId("phonesEditInput");
        phonesEditInput.setValue("This relationship is managed from the Phone side");
        htmlPanelGrid.getChildren().add(phonesEditInput);
        
        Message phonesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        phonesEditInputMessage.setId("phonesEditInputMessage");
        phonesEditInputMessage.setFor("phonesEditInput");
        phonesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(phonesEditInputMessage);
        
        HtmlOutputText emailsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailsEditOutput.setId("emailsEditOutput");
        emailsEditOutput.setValue("Emails:");
        htmlPanelGrid.getChildren().add(emailsEditOutput);
        
        HtmlOutputText emailsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailsEditInput.setId("emailsEditInput");
        emailsEditInput.setValue("This relationship is managed from the Email side");
        htmlPanelGrid.getChildren().add(emailsEditInput);
        
        Message emailsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailsEditInputMessage.setId("emailsEditInputMessage");
        emailsEditInputMessage.setFor("emailsEditInput");
        emailsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailsEditInputMessage);
        
        OutputLabel authoritiesEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        authoritiesEditOutput.setFor("authoritiesEditInput");
        authoritiesEditOutput.setId("authoritiesEditOutput");
        authoritiesEditOutput.setValue("Authorities:");
        htmlPanelGrid.getChildren().add(authoritiesEditOutput);
        
        InputText authoritiesEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        authoritiesEditInput.setId("authoritiesEditInput");
        authoritiesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.authorities}", Set.class));
        authoritiesEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(authoritiesEditInput);
        
        Message authoritiesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        authoritiesEditInputMessage.setId("authoritiesEditInputMessage");
        authoritiesEditInputMessage.setFor("authoritiesEditInput");
        authoritiesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(authoritiesEditInputMessage);
        
        OutputLabel usernameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        usernameEditOutput.setFor("usernameEditInput");
        usernameEditOutput.setId("usernameEditOutput");
        usernameEditOutput.setValue("Username:");
        htmlPanelGrid.getChildren().add(usernameEditOutput);
        
        InputTextarea usernameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        usernameEditInput.setId("usernameEditInput");
        usernameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.username}", String.class));
        LengthValidator usernameEditInputValidator = new LengthValidator();
        usernameEditInputValidator.setMaximum(32);
        usernameEditInput.addValidator(usernameEditInputValidator);
        usernameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(usernameEditInput);
        
        Message usernameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        usernameEditInputMessage.setId("usernameEditInputMessage");
        usernameEditInputMessage.setFor("usernameEditInput");
        usernameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(usernameEditInputMessage);
        
        OutputLabel passwordEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        passwordEditOutput.setFor("passwordEditInput");
        passwordEditOutput.setId("passwordEditOutput");
        passwordEditOutput.setValue("Password:");
        htmlPanelGrid.getChildren().add(passwordEditOutput);
        
        InputTextarea passwordEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        passwordEditInput.setId("passwordEditInput");
        passwordEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.password}", String.class));
        LengthValidator passwordEditInputValidator = new LengthValidator();
        passwordEditInputValidator.setMaximum(64);
        passwordEditInput.addValidator(passwordEditInputValidator);
        passwordEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(passwordEditInput);
        
        Message passwordEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordEditInputMessage.setId("passwordEditInputMessage");
        passwordEditInputMessage.setFor("passwordEditInput");
        passwordEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordEditInputMessage);
        
        OutputLabel rolesEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        rolesEditOutput.setFor("rolesEditInput");
        rolesEditOutput.setId("rolesEditOutput");
        rolesEditOutput.setValue("Roles:");
        htmlPanelGrid.getChildren().add(rolesEditOutput);
        
        SelectManyMenu rolesEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        rolesEditInput.setId("rolesEditInput");
        rolesEditInput.setConverter(new AppRoleConverter());
        rolesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.selectedRoles}", List.class));
        UISelectItems rolesEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        rolesEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appRoleBean.allAppRoles}", List.class));
        rolesEditInput.setRequired(true);
        rolesEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "appRole", String.class));
        rolesEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{appRole}", String.class));
        rolesEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{appRole}", AppRole.class));
        rolesEditInput.getChildren().add(rolesEditInputItems);
        htmlPanelGrid.getChildren().add(rolesEditInput);
        
        Message rolesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rolesEditInputMessage.setId("rolesEditInputMessage");
        rolesEditInputMessage.setFor("rolesEditInput");
        rolesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rolesEditInputMessage);
        
        OutputLabel userStatusEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        userStatusEditOutput.setFor("userStatusEditInput");
        userStatusEditOutput.setId("userStatusEditOutput");
        userStatusEditOutput.setValue("User Status:");
        htmlPanelGrid.getChildren().add(userStatusEditOutput);
        
        AutoComplete userStatusEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        userStatusEditInput.setId("userStatusEditInput");
        userStatusEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.userStatus}", UserStatus.class));
        userStatusEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{appUserBean.completeUserStatus}", List.class, new Class[] { String.class }));
        userStatusEditInput.setDropdown(true);
        userStatusEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(userStatusEditInput);
        
        Message userStatusEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        userStatusEditInputMessage.setId("userStatusEditInputMessage");
        userStatusEditInputMessage.setFor("userStatusEditInput");
        userStatusEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(userStatusEditInputMessage);
        
        OutputLabel loginAttemptsEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        loginAttemptsEditOutput.setFor("loginAttemptsEditInput");
        loginAttemptsEditOutput.setId("loginAttemptsEditOutput");
        loginAttemptsEditOutput.setValue("Login Attempts:");
        htmlPanelGrid.getChildren().add(loginAttemptsEditOutput);
        
        Spinner loginAttemptsEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        loginAttemptsEditInput.setId("loginAttemptsEditInput");
        loginAttemptsEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.loginAttempts}", Integer.class));
        loginAttemptsEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(loginAttemptsEditInput);
        
        Message loginAttemptsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        loginAttemptsEditInputMessage.setId("loginAttemptsEditInputMessage");
        loginAttemptsEditInputMessage.setFor("loginAttemptsEditInput");
        loginAttemptsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(loginAttemptsEditInputMessage);
        
        OutputLabel lastLoginDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastLoginDateEditOutput.setFor("lastLoginDateEditInput");
        lastLoginDateEditOutput.setId("lastLoginDateEditOutput");
        lastLoginDateEditOutput.setValue("Last Login Date:");
        htmlPanelGrid.getChildren().add(lastLoginDateEditOutput);
        
        Calendar lastLoginDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        lastLoginDateEditInput.setId("lastLoginDateEditInput");
        lastLoginDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.lastLoginDate}", Date.class));
        lastLoginDateEditInput.setNavigator(true);
        lastLoginDateEditInput.setEffect("slideDown");
        lastLoginDateEditInput.setPattern("dd/MM/yyyy");
        lastLoginDateEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(lastLoginDateEditInput);
        
        Message lastLoginDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastLoginDateEditInputMessage.setId("lastLoginDateEditInputMessage");
        lastLoginDateEditInputMessage.setFor("lastLoginDateEditInput");
        lastLoginDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastLoginDateEditInputMessage);
        
        OutputLabel daysToExpireEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        daysToExpireEditOutput.setFor("daysToExpireEditInput");
        daysToExpireEditOutput.setId("daysToExpireEditOutput");
        daysToExpireEditOutput.setValue("Days To Expire:");
        htmlPanelGrid.getChildren().add(daysToExpireEditOutput);
        
        Spinner daysToExpireEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        daysToExpireEditInput.setId("daysToExpireEditInput");
        daysToExpireEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.daysToExpire}", Integer.class));
        daysToExpireEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(daysToExpireEditInput);
        
        Message daysToExpireEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        daysToExpireEditInputMessage.setId("daysToExpireEditInputMessage");
        daysToExpireEditInputMessage.setFor("daysToExpireEditInput");
        daysToExpireEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(daysToExpireEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid AppUserBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText deletedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        deletedLabel.setId("deletedLabel");
        deletedLabel.setValue("Deleted:");
        htmlPanelGrid.getChildren().add(deletedLabel);
        
        HtmlOutputText deletedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        deletedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.deleted}", String.class));
        htmlPanelGrid.getChildren().add(deletedValue);
        
        HtmlOutputText creationDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateLabel.setId("creationDateLabel");
        creationDateLabel.setValue("Creation Date:");
        htmlPanelGrid.getChildren().add(creationDateLabel);
        
        HtmlOutputText creationDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        creationDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.creationDate}", Date.class));
        DateTimeConverter creationDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        creationDateValueConverter.setPattern("dd/MM/yyyy");
        creationDateValue.setConverter(creationDateValueConverter);
        htmlPanelGrid.getChildren().add(creationDateValue);
        
        HtmlOutputText updateDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateDateLabel.setId("updateDateLabel");
        updateDateLabel.setValue("Update Date:");
        htmlPanelGrid.getChildren().add(updateDateLabel);
        
        HtmlOutputText updateDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updateDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.updateDate}", Date.class));
        DateTimeConverter updateDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updateDateValueConverter.setPattern("dd/MM/yyyy");
        updateDateValue.setConverter(updateDateValueConverter);
        htmlPanelGrid.getChildren().add(updateDateValue);
        
        HtmlOutputText namesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        namesLabel.setId("namesLabel");
        namesLabel.setValue("Names:");
        htmlPanelGrid.getChildren().add(namesLabel);
        
        InputTextarea namesValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        namesValue.setId("namesValue");
        namesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.names}", String.class));
        namesValue.setReadonly(true);
        namesValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(namesValue);
        
        HtmlOutputText surnamesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        surnamesLabel.setId("surnamesLabel");
        surnamesLabel.setValue("Surnames:");
        htmlPanelGrid.getChildren().add(surnamesLabel);
        
        InputTextarea surnamesValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        surnamesValue.setId("surnamesValue");
        surnamesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.surnames}", String.class));
        surnamesValue.setReadonly(true);
        surnamesValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(surnamesValue);
        
        HtmlOutputText genderLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        genderLabel.setId("genderLabel");
        genderLabel.setValue("Gender:");
        htmlPanelGrid.getChildren().add(genderLabel);
        
        HtmlOutputText genderValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        genderValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.gender}", String.class));
        htmlPanelGrid.getChildren().add(genderValue);
        
        HtmlOutputText birthdayLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        birthdayLabel.setId("birthdayLabel");
        birthdayLabel.setValue("Birthday:");
        htmlPanelGrid.getChildren().add(birthdayLabel);
        
        HtmlOutputText birthdayValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        birthdayValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.birthday}", Date.class));
        DateTimeConverter birthdayValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        birthdayValueConverter.setPattern("dd/MM/yyyy");
        birthdayValue.setConverter(birthdayValueConverter);
        htmlPanelGrid.getChildren().add(birthdayValue);
        
        HtmlOutputText identificationLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identificationLabel.setId("identificationLabel");
        identificationLabel.setValue("Identification:");
        htmlPanelGrid.getChildren().add(identificationLabel);
        
        InputTextarea identificationValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        identificationValue.setId("identificationValue");
        identificationValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.identification}", String.class));
        identificationValue.setReadonly(true);
        identificationValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(identificationValue);
        
        HtmlOutputText identificationTypeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identificationTypeLabel.setId("identificationTypeLabel");
        identificationTypeLabel.setValue("Identification Type:");
        htmlPanelGrid.getChildren().add(identificationTypeLabel);
        
        HtmlOutputText identificationTypeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identificationTypeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.identificationType}", String.class));
        htmlPanelGrid.getChildren().add(identificationTypeValue);
        
        HtmlOutputText nationalityLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nationalityLabel.setId("nationalityLabel");
        nationalityLabel.setValue("Nationality:");
        htmlPanelGrid.getChildren().add(nationalityLabel);
        
        HtmlOutputText nationalityValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nationalityValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.nationality}", Nationality.class));
        nationalityValue.setConverter(new NationalityConverter());
        htmlPanelGrid.getChildren().add(nationalityValue);
        
        HtmlOutputText homePlaceLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        homePlaceLabel.setId("homePlaceLabel");
        homePlaceLabel.setValue("Home Place:");
        htmlPanelGrid.getChildren().add(homePlaceLabel);
        
        HtmlOutputText homePlaceValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        homePlaceValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.homePlace}", Place.class));
        homePlaceValue.setConverter(new PlaceConverter());
        htmlPanelGrid.getChildren().add(homePlaceValue);
        
        HtmlOutputText workPlaceLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workPlaceLabel.setId("workPlaceLabel");
        workPlaceLabel.setValue("Work Place:");
        htmlPanelGrid.getChildren().add(workPlaceLabel);
        
        HtmlOutputText workPlaceValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        workPlaceValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.workPlace}", Place.class));
        workPlaceValue.setConverter(new PlaceConverter());
        htmlPanelGrid.getChildren().add(workPlaceValue);
        
        HtmlOutputText phonesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        phonesLabel.setId("phonesLabel");
        phonesLabel.setValue("Phones:");
        htmlPanelGrid.getChildren().add(phonesLabel);
        
        HtmlOutputText phonesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        phonesValue.setId("phonesValue");
        phonesValue.setValue("This relationship is managed from the Phone side");
        htmlPanelGrid.getChildren().add(phonesValue);
        
        HtmlOutputText emailsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailsLabel.setId("emailsLabel");
        emailsLabel.setValue("Emails:");
        htmlPanelGrid.getChildren().add(emailsLabel);
        
        HtmlOutputText emailsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailsValue.setId("emailsValue");
        emailsValue.setValue("This relationship is managed from the Email side");
        htmlPanelGrid.getChildren().add(emailsValue);
        
        HtmlOutputText authoritiesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        authoritiesLabel.setId("authoritiesLabel");
        authoritiesLabel.setValue("Authorities:");
        htmlPanelGrid.getChildren().add(authoritiesLabel);
        
        HtmlOutputText authoritiesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        authoritiesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.authorities}", String.class));
        htmlPanelGrid.getChildren().add(authoritiesValue);
        
        HtmlOutputText usernameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usernameLabel.setId("usernameLabel");
        usernameLabel.setValue("Username:");
        htmlPanelGrid.getChildren().add(usernameLabel);
        
        InputTextarea usernameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        usernameValue.setId("usernameValue");
        usernameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.username}", String.class));
        usernameValue.setReadonly(true);
        usernameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(usernameValue);
        
        HtmlOutputText passwordLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordLabel.setId("passwordLabel");
        passwordLabel.setValue("Password:");
        htmlPanelGrid.getChildren().add(passwordLabel);
        
        InputTextarea passwordValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        passwordValue.setId("passwordValue");
        passwordValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.password}", String.class));
        passwordValue.setReadonly(true);
        passwordValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(passwordValue);
        
        HtmlOutputText rolesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rolesLabel.setId("rolesLabel");
        rolesLabel.setValue("Roles:");
        htmlPanelGrid.getChildren().add(rolesLabel);
        
        SelectManyMenu rolesValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        rolesValue.setId("rolesValue");
        rolesValue.setConverter(new AppRoleConverter());
        rolesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.selectedRoles}", List.class));
        UISelectItems rolesValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        rolesValue.setReadonly(true);
        rolesValue.setDisabled(true);
        rolesValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.roles}", Set.class));
        rolesValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "appRole", String.class));
        rolesValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{appRole}", String.class));
        rolesValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{appRole}", AppRole.class));
        rolesValue.getChildren().add(rolesValueItems);
        htmlPanelGrid.getChildren().add(rolesValue);
        
        HtmlOutputText userStatusLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        userStatusLabel.setId("userStatusLabel");
        userStatusLabel.setValue("User Status:");
        htmlPanelGrid.getChildren().add(userStatusLabel);
        
        HtmlOutputText userStatusValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        userStatusValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.userStatus}", String.class));
        htmlPanelGrid.getChildren().add(userStatusValue);
        
        HtmlOutputText loginAttemptsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        loginAttemptsLabel.setId("loginAttemptsLabel");
        loginAttemptsLabel.setValue("Login Attempts:");
        htmlPanelGrid.getChildren().add(loginAttemptsLabel);
        
        HtmlOutputText loginAttemptsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        loginAttemptsValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.loginAttempts}", String.class));
        htmlPanelGrid.getChildren().add(loginAttemptsValue);
        
        HtmlOutputText lastLoginDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastLoginDateLabel.setId("lastLoginDateLabel");
        lastLoginDateLabel.setValue("Last Login Date:");
        htmlPanelGrid.getChildren().add(lastLoginDateLabel);
        
        HtmlOutputText lastLoginDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastLoginDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.lastLoginDate}", Date.class));
        DateTimeConverter lastLoginDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        lastLoginDateValueConverter.setPattern("dd/MM/yyyy");
        lastLoginDateValue.setConverter(lastLoginDateValueConverter);
        htmlPanelGrid.getChildren().add(lastLoginDateValue);
        
        HtmlOutputText daysToExpireLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        daysToExpireLabel.setId("daysToExpireLabel");
        daysToExpireLabel.setValue("Days To Expire:");
        htmlPanelGrid.getChildren().add(daysToExpireLabel);
        
        HtmlOutputText daysToExpireValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        daysToExpireValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{appUserBean.appUser.daysToExpire}", String.class));
        htmlPanelGrid.getChildren().add(daysToExpireValue);
        
        return htmlPanelGrid;
    }
    
    public AppUser AppUserBean.getAppUser() {
        if (appUser == null) {
            appUser = new AppUser();
        }
        return appUser;
    }
    
    public void AppUserBean.setAppUser(AppUser appUser) {
        this.appUser = appUser;
    }
    
    public List<Gender> AppUserBean.completeGender(String query) {
        List<Gender> suggestions = new ArrayList<Gender>();
        for (Gender gender : Gender.values()) {
            if (gender.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(gender);
            }
        }
        return suggestions;
    }
    
    public List<IdentificationType> AppUserBean.completeIdentificationType(String query) {
        List<IdentificationType> suggestions = new ArrayList<IdentificationType>();
        for (IdentificationType identificationType : IdentificationType.values()) {
            if (identificationType.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(identificationType);
            }
        }
        return suggestions;
    }
    
    public List<Nationality> AppUserBean.completeNationality(String query) {
        List<Nationality> suggestions = new ArrayList<Nationality>();
        for (Nationality nationality : nationalityDAO.findAll()) {
            String nationalityStr = String.valueOf(nationality.getLabelKey() +  " "  + nationality.getName());
            if (nationalityStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(nationality);
            }
        }
        return suggestions;
    }
    
    public List<Place> AppUserBean.completeHomePlace(String query) {
        List<Place> suggestions = new ArrayList<Place>();
        for (Place place : placeDAO.findAll()) {
            String placeStr = String.valueOf(place.getName() +  " "  + place.getPrimaryAddress() +  " "  + place.getSecondaryAddress() +  " "  + place.getLatitude());
            if (placeStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(place);
            }
        }
        return suggestions;
    }
    
    public List<Place> AppUserBean.completeWorkPlace(String query) {
        List<Place> suggestions = new ArrayList<Place>();
        for (Place place : placeDAO.findAll()) {
            String placeStr = String.valueOf(place.getName() +  " "  + place.getPrimaryAddress() +  " "  + place.getSecondaryAddress() +  " "  + place.getLatitude());
            if (placeStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(place);
            }
        }
        return suggestions;
    }
    
    public List<Phone> AppUserBean.getSelectedPhones() {
        return selectedPhones;
    }
    
    public void AppUserBean.setSelectedPhones(List<Phone> selectedPhones) {
        if (selectedPhones != null) {
            appUser.setPhones(new HashSet<Phone>(selectedPhones));
        }
        this.selectedPhones = selectedPhones;
    }
    
    public List<Email> AppUserBean.getSelectedEmails() {
        return selectedEmails;
    }
    
    public void AppUserBean.setSelectedEmails(List<Email> selectedEmails) {
        if (selectedEmails != null) {
            appUser.setEmails(new HashSet<Email>(selectedEmails));
        }
        this.selectedEmails = selectedEmails;
    }
    
    public List<AppRole> AppUserBean.getSelectedRoles() {
        return selectedRoles;
    }
    
    public void AppUserBean.setSelectedRoles(List<AppRole> selectedRoles) {
        if (selectedRoles != null) {
            appUser.setRoles(new HashSet<AppRole>(selectedRoles));
        }
        this.selectedRoles = selectedRoles;
    }
    
    public List<UserStatus> AppUserBean.completeUserStatus(String query) {
        List<UserStatus> suggestions = new ArrayList<UserStatus>();
        for (UserStatus userStatus : UserStatus.values()) {
            if (userStatus.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(userStatus);
            }
        }
        return suggestions;
    }
    
    public String AppUserBean.onEdit() {
        if (appUser != null && appUser.getPhones() != null) {
            selectedPhones = new ArrayList<Phone>(appUser.getPhones());
        }
        if (appUser != null && appUser.getEmails() != null) {
            selectedEmails = new ArrayList<Email>(appUser.getEmails());
        }
        if (appUser != null && appUser.getRoles() != null) {
            selectedRoles = new ArrayList<AppRole>(appUser.getRoles());
        }
        return null;
    }
    
    public boolean AppUserBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void AppUserBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String AppUserBean.displayList() {
        createDialogVisible = false;
        findAllAppUsers();
        return "appUser";
    }
    
    public String AppUserBean.displayCreateDialog() {
        appUser = new AppUser();
        createDialogVisible = true;
        return "appUser";
    }
    
    public String AppUserBean.persist() {
        String message = "";
        if (appUser.getId() != null) {
            userService.updateAppUser(appUser);
            message = "message_successfully_updated";
        } else {
            userService.saveAppUser(appUser);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "AppUser");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllAppUsers();
    }
    
    public String AppUserBean.delete() {
        userService.deleteAppUser(appUser);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "AppUser");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllAppUsers();
    }
    
    public void AppUserBean.reset() {
        appUser = null;
        selectedPhones = null;
        selectedEmails = null;
        selectedRoles = null;
        createDialogVisible = false;
    }
    
    public void AppUserBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
