// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bytepoxic.core.model;

import com.bytepoxic.core.model.Location;
import com.bytepoxic.core.model.LocationDataOnDemand;
import com.bytepoxic.core.model.NationalityDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect LocationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LocationDataOnDemand: @Component;
    
    private Random LocationDataOnDemand.rnd = new SecureRandom();
    
    private List<Location> LocationDataOnDemand.data;
    
    @Autowired
    NationalityDataOnDemand LocationDataOnDemand.nationalityDataOnDemand;
    
    public Location LocationDataOnDemand.getNewTransientLocation(int index) {
        Location obj = new Location();
        setAppCurrent(obj, index);
        setCode(obj, index);
        setCreationDate(obj, index);
        setDeleted(obj, index);
        setLabelKey(obj, index);
        setLatitude(obj, index);
        setLongitude(obj, index);
        setName(obj, index);
        setParent(obj, index);
        setUpdateDate(obj, index);
        return obj;
    }
    
    public void LocationDataOnDemand.setAppCurrent(Location obj, int index) {
        Boolean appCurrent = Boolean.TRUE;
        obj.setAppCurrent(appCurrent);
    }
    
    public void LocationDataOnDemand.setCode(Location obj, int index) {
        String code = "c" + index;
        if (code.length() > 2) {
            code = new Random().nextInt(10) + code.substring(1, 2);
        }
        obj.setCode(code);
    }
    
    public void LocationDataOnDemand.setCreationDate(Location obj, int index) {
        Date creationDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreationDate(creationDate);
    }
    
    public void LocationDataOnDemand.setDeleted(Location obj, int index) {
        Boolean deleted = Boolean.TRUE;
        obj.setDeleted(deleted);
    }
    
    public void LocationDataOnDemand.setLabelKey(Location obj, int index) {
        String labelKey = "labelKey_" + index;
        if (labelKey.length() > 128) {
            labelKey = labelKey.substring(0, 128);
        }
        obj.setLabelKey(labelKey);
    }
    
    public void LocationDataOnDemand.setLatitude(Location obj, int index) {
        Double latitude = new Integer(index).doubleValue();
        obj.setLatitude(latitude);
    }
    
    public void LocationDataOnDemand.setLongitude(Location obj, int index) {
        Double longitude = new Integer(index).doubleValue();
        obj.setLongitude(longitude);
    }
    
    public void LocationDataOnDemand.setName(Location obj, int index) {
        String name = "name_" + index;
        if (name.length() > 64) {
            name = name.substring(0, 64);
        }
        obj.setName(name);
    }
    
    public void LocationDataOnDemand.setParent(Location obj, int index) {
        Location parent = obj;
        obj.setParent(parent);
    }
    
    public void LocationDataOnDemand.setUpdateDate(Location obj, int index) {
        Date updateDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdateDate(updateDate);
    }
    
    public Location LocationDataOnDemand.getSpecificLocation(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Location obj = data.get(index);
        Long id = obj.getId();
        return Location.findLocation(id);
    }
    
    public Location LocationDataOnDemand.getRandomLocation() {
        init();
        Location obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Location.findLocation(id);
    }
    
    public boolean LocationDataOnDemand.modifyLocation(Location obj) {
        return false;
    }
    
    public void LocationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Location.findLocationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Location' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Location>();
        for (int i = 0; i < 10; i++) {
            Location obj = getNewTransientLocation(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
