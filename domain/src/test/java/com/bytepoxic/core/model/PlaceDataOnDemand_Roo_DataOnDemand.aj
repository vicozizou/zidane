// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bytepoxic.core.model;

import com.bytepoxic.core.model.Location;
import com.bytepoxic.core.model.LocationDataOnDemand;
import com.bytepoxic.core.model.Place;
import com.bytepoxic.core.model.PlaceDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PlaceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PlaceDataOnDemand: @Component;
    
    private Random PlaceDataOnDemand.rnd = new SecureRandom();
    
    private List<Place> PlaceDataOnDemand.data;
    
    @Autowired
    LocationDataOnDemand PlaceDataOnDemand.locationDataOnDemand;
    
    public Place PlaceDataOnDemand.getNewTransientPlace(int index) {
        Place obj = new Place();
        setLatitude(obj, index);
        setLocation(obj, index);
        setLongitude(obj, index);
        setName(obj, index);
        setPrimaryAddress(obj, index);
        setSecondaryAddress(obj, index);
        setZoom(obj, index);
        return obj;
    }
    
    public void PlaceDataOnDemand.setLatitude(Place obj, int index) {
        Double latitude = new Integer(index).doubleValue();
        obj.setLatitude(latitude);
    }
    
    public void PlaceDataOnDemand.setLocation(Place obj, int index) {
        Location location = locationDataOnDemand.getRandomLocation();
        obj.setLocation(location);
    }
    
    public void PlaceDataOnDemand.setLongitude(Place obj, int index) {
        Double longitude = new Integer(index).doubleValue();
        obj.setLongitude(longitude);
    }
    
    public void PlaceDataOnDemand.setName(Place obj, int index) {
        String name = "name_" + index;
        if (name.length() > 64) {
            name = name.substring(0, 64);
        }
        obj.setName(name);
    }
    
    public void PlaceDataOnDemand.setPrimaryAddress(Place obj, int index) {
        String primaryAddress = "primaryAddress_" + index;
        if (primaryAddress.length() > 256) {
            primaryAddress = primaryAddress.substring(0, 256);
        }
        obj.setPrimaryAddress(primaryAddress);
    }
    
    public void PlaceDataOnDemand.setSecondaryAddress(Place obj, int index) {
        String secondaryAddress = "secondaryAddress_" + index;
        if (secondaryAddress.length() > 256) {
            secondaryAddress = secondaryAddress.substring(0, 256);
        }
        obj.setSecondaryAddress(secondaryAddress);
    }
    
    public void PlaceDataOnDemand.setZoom(Place obj, int index) {
        Integer zoom = new Integer(index);
        obj.setZoom(zoom);
    }
    
    public Place PlaceDataOnDemand.getSpecificPlace(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Place obj = data.get(index);
        Long id = obj.getId();
        return Place.findPlace(id);
    }
    
    public Place PlaceDataOnDemand.getRandomPlace() {
        init();
        Place obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Place.findPlace(id);
    }
    
    public boolean PlaceDataOnDemand.modifyPlace(Place obj) {
        return false;
    }
    
    public void PlaceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Place.findPlaceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Place' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Place>();
        for (int i = 0; i < 10; i++) {
            Place obj = getNewTransientPlace(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
