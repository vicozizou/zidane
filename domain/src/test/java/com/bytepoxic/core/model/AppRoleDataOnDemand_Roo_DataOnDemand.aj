// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bytepoxic.core.model;

import com.bytepoxic.core.model.AppRole;
import com.bytepoxic.core.model.AppRoleDataOnDemand;
import com.bytepoxic.core.service.UserService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AppRoleDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AppRoleDataOnDemand: @Component;
    
    private Random AppRoleDataOnDemand.rnd = new SecureRandom();
    
    private List<AppRole> AppRoleDataOnDemand.data;
    
    @Autowired
    UserService AppRoleDataOnDemand.userService;
    
    public AppRole AppRoleDataOnDemand.getNewTransientAppRole(int index) {
        AppRole obj = new AppRole();
        setDescription(obj, index);
        setLabelKey(obj, index);
        setName(obj, index);
        return obj;
    }
    
    public void AppRoleDataOnDemand.setDescription(AppRole obj, int index) {
        String description = "description_" + index;
        if (description.length() > 128) {
            description = description.substring(0, 128);
        }
        obj.setDescription(description);
    }
    
    public void AppRoleDataOnDemand.setLabelKey(AppRole obj, int index) {
        String labelKey = "labelKey_" + index;
        if (labelKey.length() > 128) {
            labelKey = labelKey.substring(0, 128);
        }
        obj.setLabelKey(labelKey);
    }
    
    public void AppRoleDataOnDemand.setName(AppRole obj, int index) {
        String name = "name_" + index;
        if (name.length() > 32) {
            name = new Random().nextInt(10) + name.substring(1, 32);
        }
        obj.setName(name);
    }
    
    public AppRole AppRoleDataOnDemand.getSpecificAppRole(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AppRole obj = data.get(index);
        Long id = obj.getId();
        return userService.findAppRole(id);
    }
    
    public AppRole AppRoleDataOnDemand.getRandomAppRole() {
        init();
        AppRole obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return userService.findAppRole(id);
    }
    
    public boolean AppRoleDataOnDemand.modifyAppRole(AppRole obj) {
        return false;
    }
    
    public void AppRoleDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = userService.findAppRoleEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AppRole' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AppRole>();
        for (int i = 0; i < 10; i++) {
            AppRole obj = getNewTransientAppRole(i);
            try {
                userService.saveAppRole(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
