// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bytepoxic.core.model;

import com.bytepoxic.core.model.Location;
import com.bytepoxic.core.model.LocationDataOnDemand;
import com.bytepoxic.core.model.Nationality;
import com.bytepoxic.core.model.NationalityDataOnDemand;
import com.bytepoxic.core.service.LocationService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect NationalityDataOnDemand_Roo_DataOnDemand {
    
    declare @type: NationalityDataOnDemand: @Component;
    
    private Random NationalityDataOnDemand.rnd = new SecureRandom();
    
    private List<Nationality> NationalityDataOnDemand.data;
    
    @Autowired
    LocationDataOnDemand NationalityDataOnDemand.locationDataOnDemand;
    
    @Autowired
    LocationService NationalityDataOnDemand.locationService;
    
    public Nationality NationalityDataOnDemand.getNewTransientNationality(int index) {
        Nationality obj = new Nationality();
        setCountry(obj, index);
        setLabelKey(obj, index);
        setName(obj, index);
        return obj;
    }
    
    public void NationalityDataOnDemand.setCountry(Nationality obj, int index) {
        Location country = locationDataOnDemand.getRandomLocation();
        obj.setCountry(country);
    }
    
    public void NationalityDataOnDemand.setLabelKey(Nationality obj, int index) {
        String labelKey = "labelKey_" + index;
        if (labelKey.length() > 128) {
            labelKey = labelKey.substring(0, 128);
        }
        obj.setLabelKey(labelKey);
    }
    
    public void NationalityDataOnDemand.setName(Nationality obj, int index) {
        String name = "name_" + index;
        if (name.length() > 64) {
            name = new Random().nextInt(10) + name.substring(1, 64);
        }
        obj.setName(name);
    }
    
    public Nationality NationalityDataOnDemand.getSpecificNationality(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Nationality obj = data.get(index);
        Long id = obj.getId();
        return locationService.findNationality(id);
    }
    
    public Nationality NationalityDataOnDemand.getRandomNationality() {
        init();
        Nationality obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return locationService.findNationality(id);
    }
    
    public boolean NationalityDataOnDemand.modifyNationality(Nationality obj) {
        return false;
    }
    
    public void NationalityDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = locationService.findNationalityEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Nationality' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Nationality>();
        for (int i = 0; i < 10; i++) {
            Nationality obj = getNewTransientNationality(i);
            try {
                locationService.saveNationality(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
